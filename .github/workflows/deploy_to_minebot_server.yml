name: "Deploy to MineBot Linux Server"

on:
  push:
    branches:
      - 'main'

env:
  # Variables for "build-and-push-image" job
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  # Variables for "deploy" job
  DEPLOY_PATH: /home/${{ vars.DEPLOY_USER }}/minebot_deploy
  DEPLOY_PORT: 22

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: | 
            ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs:
      - build-and-push-image
    runs-on: ubuntu-latest
    permissions:
      packages: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.MINEBOT_VM_SSH_KEY }}
          known_hosts: "# will be overwritten by the next step"

      - name: Add Known Hosts
        run: ssh-keyscan -H "${{ vars.DEPLOY_HOST }}" >> ~/.ssh/known_hosts

      - name: Send code to server (${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }}) with RSYNC
        run: rsync -az --no-owner --no-group . ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }}:${{ env.DEPLOY_PATH }}

      - name: multiple command
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.DEPLOY_HOST }}
          port: ${{ vars.DEPLOY_PORT }}
          username: ${{ vars.DEPLOY_USER }}
          key: ${{ secrets.MINEBOT_VM_SSH_KEY }}
          script: |
            cd ${{ env.DEPLOY_PATH }}
            echo "# Updated at: `date`" > .env
            # Branch name
            echo MINEBOT__IMAGE_TAG=${{ github.ref_name }} >> .env
            echo MINEBOT__DISCORD_TOKEN=${{ secrets.MINEBOT__DISCORD_TOKEN }} >> .env
            echo MINEBOT__GUILD_ID=${{ vars.MINEBOT__GUILD_ID }} >> .env
            echo MINEBOT__MINECRAFT__ADDRESS=${{ vars.MINEBOT__MINECRAFT__ADDRESS }} >> .env
            echo MINEBOT__MINECRAFT__PORT=${{ vars.MINEBOT__MINECRAFT__PORT }} >> .env
            docker compose pull
            docker compose down
            docker compose up -d
            
            
            
            
